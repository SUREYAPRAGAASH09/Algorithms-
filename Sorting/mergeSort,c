#include<stdio.h>
#include<stdlib.h>

void Merge(int *A,int *L,int leftCount,int *R,int rightCount) 
{
      int i,j,k;

      i = 0; j = 0; k =0;

      while(i<leftCount && j< rightCount) {
        if(L[i]  < R[j]) A[k++] = L[i++];
        else A[k++] = R[j++];
      }
      while(i < leftCount) A[k++] = L[i++];
      while(j < rightCount) A[k++] = R[j++];
}

void MergeSort(int *A,int n)
{
      int mid,i, *L, *R, m;
      if(n < 2) return; 

      mid = n/2; 
      m = n-mid;

      L = (int*)malloc(mid*sizeof(int)); 
      R = (int*)malloc((n- mid)*sizeof(int)); 

      for(i = 0;i<mid;i++) L[i] = A[i]; 
      for(i = mid;i<n;i++) R[i-mid] = A[i];


      if (mid > 1)		MergeSort(L,mid); 
      if (m > 1)    	MergeSort(R, m);
      Merge(A,L,mid,R,m);  
      free(L);
      free(R);
}

int main() 
{
      int Arr[9] = {17, 14, 13, 11, 6, 3, 2, 1, 9}; 
      int i,numberOfElements;

      numberOfElements = sizeof(A)/sizeof(A[0]); 

      MergeSort(A,numberOfElements);

      for(i = 0;i < numberOfElements;i++) printf("%d ",A[i]);

      return 0;
}
